import sys
from random import randint
import time
TIMEOUT = 1

class Controller(process):
    def setup(parent, nlearners:int):
        self.values_proposed = set()
        self.proposals_learned = set()
        self.learners_num = 0
        
    def receive(msg=('value_proposed', n, v), from_= prop):
        self.values_proposed.add(v)
        # if prop in self.values_proposed:
        #     self.values_proposed[prop].append(v)
        # else:
        #     self.values_proposed[prop] = []
        #     self.values_proposed[prop].append(n)

    def receive(msg=('value_learned', n, v), from_=learner):
        #output("#in value_learned")
        learned_values = setof((n, v), received(('value_learned', n, v),))
        self.proposals_learned.add(v)
        self.learners_num += 1
        #output('learned Values------------------------> ', learned_values)
        if await(nlearners == self.learners_num and len(self.proposals_learned) == 1):
            correctness_file = open("correctness_base.txt", "w+")
            correctness_file.write('Termination condition is satisfied, all the learners have learned a value. \n')
            correctness_file.write('Values that were proposed are: \n')
            for value in self.values_proposed:
                correctness_file.write(str(value) + " ")
            correctness_file.write("\n-----------\nThe value that was chosen by the learners is: ")
            for val in self.proposals_learned:
                correctness_file.write(str(val) + "\n")
    def receive(msg=('perf_value_not_learned'), from_= learner):
        correctness_file = open("correctness_base.txt", "w+")
        correctness_file.write('\nTermination condition was violated. \n')      


    def run():
        await(received(('done',)),)
        send(('controller_terminating',), to= parent)
        output('Controller Terminating. Goodbye.')


class Proposer(process):
    def setup(acceptors:set, controller:process):
        self.n = None              # proposal number
        self.majority = acceptors  # majority of acceptors; all in other papers
        self.prem_prop = set()

    def to_consent():
        n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num
        send(('prepare', n), to= majority)

        if await(len(setof(a, received(('respond', _n, _), from_ =a)))
                 > len(acceptors)/2):
            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                      or {randint(1,100)})  # any value, pick in 1..100
            responded = setof(a, received(('respond', _n, _), from_ =a))
            #time.sleep(1)
            send(('accept', n, v), to= responded)
            send(('value_proposed', n, v), to= controller)
            debug('### chose', n, v)
        elif some(received(('preempted',n2)), has=
                n2 > n):
            #output('### leader 1.3 preempt:', 'r2', r2, 'leader2', leader2)
            output('Abandoned Proposal Number ', n)
            n = n2
        elif timeout(TIMEOUT):
            output('failed proposal number', n)
    
    # def receive(msg= ('preempted', n), from_= a):
    #     if (len(setof(a, received(('preempted', _n), from_= a))) > 0):
    #         prem_prop.add(n)

    def run():
        while not received(('done',)):
            to_consent()
        output('Proposer terminating.')

    def anyof(s):
        return next(iter(s)) if s else None

class Acceptor(process):
    def setup(learners:set): pass

    def receive(msg= ('prepare', n), from_= p):
        if each(sent(('respond', n2, _)), has= n > n2):
            maxprop = anyof(setof((n, v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))
            send(('respond', n, maxprop), to =p)

    def receive(msg= ('accept', n, v)):
        if not some(sent(('respond', n2, _)), has= n2 > n):
            send(('accepted', n, v), to= learners)
    
    def receive(msg=m, from_= p):
        #output("##In receive!", m)
        if m[0] == 'done':
            return
        max_b = max(setof(b, received(('prepare',b))) | setof(b, received(('accept',b,_))))
        #output('#max:', max_b)
        if m[1] < max_b:
            send(('preempted', max_b), to= p)

    def run():
        await(received(('done',)))
        output('Acceptor terminating.')

    def anyof(s):
        """return any element of set s if s is not empty or 'None' otherwise"""
        return next(iter(s)) if s else None

class Learner(process):
    def setup(acceptors:set, controller:process): pass

    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            output('learned', n, v)
            send(('value_learned', n, v), to= controller)

        elif timeout(TIMEOUT * 10):
            output('failed learning anything')
            send(('perf_value_not_learned'), to= controller)

    def run():
        learn()
        output('Learner terminating.')
        send(('learned', ), to=nodeof(self))

def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 5
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3

    output('--------------->', str(self))
    controller = new(Controller,(self, nlearners,), num= 1)
    start(controller)
    acceptors = new(self.Acceptor, num= nacceptors)
    proposers = new(Proposer, (acceptors, controller,), num= nproposers)
    learners = new(Learner, (acceptors, controller,), num= nlearners)
    for p in acceptors: setup(p, (learners,))
    start(acceptors | proposers | learners)
    await(each(l in learners, has=received(('learned',), from_=l)))
    #output('done')
    send(('done',), to= (acceptors|proposers))
    output("WAITING FOR CONTROLLER TO TERMINATE")
    send(('done',), to= controller)
    #await(received(('controller_terminating',), from_=controller))
    output("----------------------->done........")

# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News 
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.