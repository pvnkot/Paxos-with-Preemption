# -*- generated by 1.0.12 -*-
import da
PatternExpr_200 = da.pat.TuplePattern([da.pat.ConstantPattern('value_proposed'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_209 = da.pat.FreePattern('prop')
PatternExpr_221 = da.pat.TuplePattern([da.pat.ConstantPattern('value_learned'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_230 = da.pat.FreePattern('learner')
PatternExpr_236 = da.pat.TuplePattern([da.pat.ConstantPattern('value_learned'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_343 = da.pat.ConstantPattern('perf_value_not_learned')
PatternExpr_347 = da.pat.FreePattern('learner')
PatternExpr_367 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_372 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_452 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern455_'), da.pat.FreePattern(None)])
PatternExpr_459 = da.pat.FreePattern('a')
PatternExpr_487 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern490_'), da.pat.TuplePattern([da.pat.FreePattern('n2'), da.pat.FreePattern('v')])])
PatternExpr_518 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern521_'), da.pat.TuplePattern([da.pat.FreePattern('n2'), da.pat.FreePattern(None)])])
PatternExpr_554 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.BoundPattern('_BoundPattern557_'), da.pat.FreePattern(None)])
PatternExpr_561 = da.pat.FreePattern('a')
PatternExpr_601 = da.pat.TuplePattern([da.pat.ConstantPattern('preempted'), da.pat.FreePattern('n2')])
PatternExpr_640 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_645 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_685 = da.pat.TuplePattern([da.pat.ConstantPattern('prepare'), da.pat.FreePattern('n')])
PatternExpr_692 = da.pat.FreePattern('p')
PatternExpr_698 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.FreePattern('n2'), da.pat.FreePattern(None)])
PatternExpr_727 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_753 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern(None)])
PatternExpr_788 = da.pat.TuplePattern([da.pat.ConstantPattern('accept'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_801 = da.pat.TuplePattern([da.pat.ConstantPattern('respond'), da.pat.FreePattern('n2'), da.pat.FreePattern(None)])
PatternExpr_834 = da.pat.FreePattern('m')
PatternExpr_838 = da.pat.FreePattern('p')
PatternExpr_853 = da.pat.TuplePattern([da.pat.ConstantPattern('prepare'), da.pat.FreePattern('b')])
PatternExpr_875 = da.pat.TuplePattern([da.pat.ConstantPattern('accept'), da.pat.FreePattern('b'), da.pat.FreePattern(None)])
PatternExpr_916 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_921 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_967 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.FreePattern('n'), da.pat.FreePattern('v')])
PatternExpr_993 = da.pat.TuplePattern([da.pat.ConstantPattern('accepted'), da.pat.BoundPattern('_BoundPattern996_'), da.pat.BoundPattern('_BoundPattern997_')])
PatternExpr_1000 = da.pat.FreePattern('a')
PatternExpr_1177 = da.pat.TuplePattern([da.pat.ConstantPattern('learned')])
PatternExpr_1182 = da.pat.BoundPattern('_BoundPattern1183_')
PatternExpr_1184 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern1190_')]), da.pat.TuplePattern([da.pat.ConstantPattern('learned')])])
_config_object = {}
import sys
from random import randint
import time
TIMEOUT = 1

class Controller(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ControllerReceivedEvent_2 = []
        self._ControllerReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ControllerReceivedEvent_0', PatternExpr_200, sources=[PatternExpr_209], destinations=None, timestamps=None, record_history=None, handlers=[self._Controller_handler_199]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ControllerReceivedEvent_1', PatternExpr_221, sources=[PatternExpr_230], destinations=None, timestamps=None, record_history=None, handlers=[self._Controller_handler_220]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ControllerReceivedEvent_2', PatternExpr_236, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ControllerReceivedEvent_3', PatternExpr_343, sources=[PatternExpr_347], destinations=None, timestamps=None, record_history=None, handlers=[self._Controller_handler_342]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ControllerReceivedEvent_4', PatternExpr_367, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, parent, nlearners, **rest_1210):
        super().setup(parent=parent, nlearners=nlearners, **rest_1210)
        self._state.parent = parent
        self._state.nlearners = nlearners
        self._state.values_proposed = set()
        self._state.proposals_learned = set()
        self._state.learners_num = 0

    def run(self):
        super()._label('_st_label_364', block=False)
        _st_label_364 = 0
        while (_st_label_364 == 0):
            _st_label_364 += 1
            if PatternExpr_372.match_iter(self._ControllerReceivedEvent_4, SELF_ID=self._id):
                _st_label_364 += 1
            else:
                super()._label('_st_label_364', block=True)
                _st_label_364 -= 1
        self.send(('controller_terminating',), to=self._state.parent)
        self.output('Controller Terminating. Goodbye.')

    def _Controller_handler_199(self, n, v, prop):
        self._state.values_proposed.add(v)
    _Controller_handler_199._labels = None
    _Controller_handler_199._notlabels = None

    def _Controller_handler_220(self, n, v, learner):
        learned_values = {(n, v) for (_, _, (_ConstantPattern251_, n, v)) in self._ControllerReceivedEvent_2 if (_ConstantPattern251_ == 'value_learned')}
        self._state.proposals_learned.add(v)
        self._state.learners_num += 1
        super()._label('_st_label_273', block=False)
        _st_label_273 = 0
        while (_st_label_273 == 0):
            _st_label_273 += 1
            if ((self._state.nlearners == self._state.learners_num) and (len(self._state.proposals_learned) == 1)):
                correctness_file = open('correctness_base.txt', 'w+')
                correctness_file.write('Termination condition is satisfied, all the learners have learned a value. \n')
                correctness_file.write('Values that were proposed are: \n')
                for value in self._state.values_proposed:
                    correctness_file.write((str(value) + ' '))
                correctness_file.write('\n-----------\nThe value that was chosen by the learners is: ')
                for val in self._state.proposals_learned:
                    correctness_file.write((str(val) + '\n'))
                _st_label_273 += 1
            else:
                super()._label('_st_label_273', block=True)
                _st_label_273 -= 1
    _Controller_handler_220._labels = None
    _Controller_handler_220._notlabels = None

    def _Controller_handler_342(self, learner):
        correctness_file = open('correctness_base.txt', 'w+')
        correctness_file.write('\nTermination condition was violated. \n')
    _Controller_handler_342._labels = None
    _Controller_handler_342._notlabels = None

class Proposer(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ProposerReceivedEvent_0 = []
        self._ProposerReceivedEvent_1 = []
        self._ProposerReceivedEvent_2 = []
        self._ProposerReceivedEvent_3 = []
        self._ProposerReceivedEvent_4 = []
        self._ProposerReceivedEvent_5 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_0', PatternExpr_452, sources=[PatternExpr_459], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_1', PatternExpr_487, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_2', PatternExpr_518, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_3', PatternExpr_554, sources=[PatternExpr_561], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_4', PatternExpr_601, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ProposerReceivedEvent_5', PatternExpr_640, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, acceptors, controller, **rest_1210):
        super().setup(acceptors=acceptors, controller=controller, **rest_1210)
        self._state.acceptors = acceptors
        self._state.controller = controller
        self._state.n = None
        self._state.majority = self._state.acceptors
        self._state.prem_prop = set()

    def run(self):
        while (not PatternExpr_645.match_iter(self._ProposerReceivedEvent_5, SELF_ID=self._id)):
            self.to_consent()
        self.output('Proposer terminating.')

    def to_consent(self):
        self._state.n = ((0, self._id) if (self._state.n == None) else ((self._state.n[0] + 1), self._id))
        self.send(('prepare', self._state.n), to=self._state.majority)
        super()._label('_st_label_447', block=False)
        n2 = None

        def ExistentialOpExpr_599():
            nonlocal n2
            for (_, _, (_ConstantPattern616_, n2)) in self._ProposerReceivedEvent_4:
                if (_ConstantPattern616_ == 'preempted'):
                    if (n2 > self._state.n):
                        return True
            return False
        _st_label_447 = 0
        self._timer_start()
        while (_st_label_447 == 0):
            _st_label_447 += 1
            if (len({a for (_, (_, _, a), (_ConstantPattern470_, _BoundPattern472_, _)) in self._ProposerReceivedEvent_0 if (_ConstantPattern470_ == 'respond') if (_BoundPattern472_ == self._state.n)}) > (len(self._state.acceptors) / 2)):
                v = self.anyof(({v for (_, _, (_ConstantPattern506_, _BoundPattern508_, (n2, v))) in self._ProposerReceivedEvent_1 if (_ConstantPattern506_ == 'respond') if (_BoundPattern508_ == self._state.n) if (n2 == max({n2 for (_, _, (_ConstantPattern535_, _BoundPattern537_, (n2, _))) in self._ProposerReceivedEvent_2 if (_ConstantPattern535_ == 'respond') if (_BoundPattern537_ == self._state.n)}))} or {randint(1, 100)}))
                responded = {a for (_, (_, _, a), (_ConstantPattern572_, _BoundPattern574_, _)) in self._ProposerReceivedEvent_3 if (_ConstantPattern572_ == 'respond') if (_BoundPattern574_ == self._state.n)}
                self.send(('accept', self._state.n, v), to=responded)
                self.send(('value_proposed', self._state.n, v), to=self._state.controller)
                self.debug('### chose', self._state.n, v)
                _st_label_447 += 1
            elif ExistentialOpExpr_599():
                self.output('Abandoned Proposal Number ', self._state.n)
                self._state.n = n2
                _st_label_447 += 1
            elif self._timer_expired:
                self.output('failed proposal number', self._state.n)
                _st_label_447 += 1
            else:
                super()._label('_st_label_447', block=True, timeout=TIMEOUT)
                _st_label_447 -= 1

    def anyof(self, s):
        return (next(iter(s)) if s else None)

class Acceptor(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._AcceptorSentEvent_1 = []
        self._AcceptorSentEvent_2 = []
        self._AcceptorSentEvent_3 = []
        self._AcceptorSentEvent_5 = []
        self._AcceptorReceivedEvent_7 = []
        self._AcceptorReceivedEvent_8 = []
        self._AcceptorReceivedEvent_9 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_0', PatternExpr_685, sources=[PatternExpr_692], destinations=None, timestamps=None, record_history=None, handlers=[self._Acceptor_handler_684]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_1', PatternExpr_698, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_2', PatternExpr_727, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_3', PatternExpr_753, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_4', PatternExpr_788, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Acceptor_handler_787]), da.pat.EventPattern(da.pat.SentEvent, '_AcceptorSentEvent_5', PatternExpr_801, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_6', PatternExpr_834, sources=[PatternExpr_838], destinations=None, timestamps=None, record_history=None, handlers=[self._Acceptor_handler_833]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_7', PatternExpr_853, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_8', PatternExpr_875, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_AcceptorReceivedEvent_9', PatternExpr_916, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, learners, **rest_1210):
        super().setup(learners=learners, **rest_1210)
        self._state.learners = learners
        pass

    def run(self):
        super()._label('_st_label_913', block=False)
        _st_label_913 = 0
        while (_st_label_913 == 0):
            _st_label_913 += 1
            if PatternExpr_921.match_iter(self._AcceptorReceivedEvent_9, SELF_ID=self._id):
                _st_label_913 += 1
            else:
                super()._label('_st_label_913', block=True)
                _st_label_913 -= 1
        self.output('Acceptor terminating.')

    def anyof(self, s):
        "return any element of set s if s is not empty or 'None' otherwise"
        return (next(iter(s)) if s else None)

    def _Acceptor_handler_684(self, n, p):
        n2 = None

        def UniversalOpExpr_696():
            nonlocal n2
            for (_, _, (_ConstantPattern714_, n2, _)) in self._AcceptorSentEvent_1:
                if (_ConstantPattern714_ == 'respond'):
                    if (not (n > n2)):
                        return False
            return True
        if UniversalOpExpr_696():
            maxprop = self.anyof({(n, v) for (_, _, (_ConstantPattern743_, n, v)) in self._AcceptorSentEvent_2 if (_ConstantPattern743_ == 'accepted') if (n == max({n for (_, _, (_ConstantPattern768_, n, _)) in self._AcceptorSentEvent_3 if (_ConstantPattern768_ == 'accepted')}))})
            self.send(('respond', n, maxprop), to=p)
    _Acceptor_handler_684._labels = None
    _Acceptor_handler_684._notlabels = None

    def _Acceptor_handler_787(self, n, v):
        n2 = None

        def ExistentialOpExpr_799():
            nonlocal n2
            for (_, _, (_ConstantPattern817_, n2, _)) in self._AcceptorSentEvent_5:
                if (_ConstantPattern817_ == 'respond'):
                    if (n2 > n):
                        return True
            return False
        if (not ExistentialOpExpr_799()):
            self.send(('accepted', n, v), to=self._state.learners)
    _Acceptor_handler_787._labels = None
    _Acceptor_handler_787._notlabels = None

    def _Acceptor_handler_833(self, m, p):
        if (m[0] == 'done'):
            return
        max_b = max(({b for (_, _, (_ConstantPattern868_, b)) in self._AcceptorReceivedEvent_7 if (_ConstantPattern868_ == 'prepare')} | {b for (_, _, (_ConstantPattern891_, b, _)) in self._AcceptorReceivedEvent_8 if (_ConstantPattern891_ == 'accept')}))
        if (m[1] < max_b):
            self.send(('preempted', max_b), to=p)
    _Acceptor_handler_833._labels = None
    _Acceptor_handler_833._notlabels = None

class Learner(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._LearnerReceivedEvent_0 = []
        self._LearnerReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_LearnerReceivedEvent_0', PatternExpr_967, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_LearnerReceivedEvent_1', PatternExpr_993, sources=[PatternExpr_1000], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, acceptors, controller, **rest_1210):
        super().setup(acceptors=acceptors, controller=controller, **rest_1210)
        self._state.acceptors = acceptors
        self._state.controller = controller
        pass

    def run(self):
        self.learn()
        self.output('Learner terminating.')
        self.send(('learned',), to=self.nodeof(self._id))

    def learn(self):
        super()._label('_st_label_964', block=False)
        v = n = a = None

        def ExistentialOpExpr_965():
            nonlocal v, n, a
            for (_, _, (_ConstantPattern984_, n, v)) in self._LearnerReceivedEvent_0:
                if (_ConstantPattern984_ == 'accepted'):
                    if (len({a for (_, (_, _, a), (_ConstantPattern1011_, _BoundPattern1013_, _BoundPattern1014_)) in self._LearnerReceivedEvent_1 if (_ConstantPattern1011_ == 'accepted') if (_BoundPattern1013_ == n) if (_BoundPattern1014_ == v)}) > (len(self._state.acceptors) / 2)):
                        return True
            return False
        _st_label_964 = 0
        self._timer_start()
        while (_st_label_964 == 0):
            _st_label_964 += 1
            if ExistentialOpExpr_965():
                self.output('learned', n, v)
                self.send(('value_learned', n, v), to=self._state.controller)
                _st_label_964 += 1
            elif self._timer_expired:
                self.output('failed learning anything')
                self.send('perf_value_not_learned', to=self._state.controller)
                _st_label_964 += 1
            else:
                super()._label('_st_label_964', block=True, timeout=(TIMEOUT * 10))
                _st_label_964 -= 1

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._Node_ReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_Node_ReceivedEvent_0', PatternExpr_1177, sources=[PatternExpr_1182], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def run(self):
        nacceptors = (int(sys.argv[1]) if (len(sys.argv) > 1) else 3)
        nproposers = (int(sys.argv[2]) if (len(sys.argv) > 2) else 5)
        nlearners = (int(sys.argv[3]) if (len(sys.argv) > 3) else 3)
        self.output('--------------->', str(self._id))
        controller = self.new(Controller, (self._id, nlearners), num=1)
        self._start(controller)
        acceptors = self.new(Acceptor, num=nacceptors)
        proposers = self.new(Proposer, (acceptors, controller), num=nproposers)
        learners = self.new(Learner, (acceptors, controller), num=nlearners)
        for p in acceptors:
            self._setup(p, (learners,))
        self._start(((acceptors | proposers) | learners))
        super()._label('_st_label_1168', block=False)
        l = None

        def UniversalOpExpr_1169():
            nonlocal l
            for l in learners:
                if (not PatternExpr_1184.match_iter(self._Node_ReceivedEvent_0, _BoundPattern1190_=l)):
                    return False
            return True
        _st_label_1168 = 0
        while (_st_label_1168 == 0):
            _st_label_1168 += 1
            if UniversalOpExpr_1169():
                _st_label_1168 += 1
            else:
                super()._label('_st_label_1168', block=True)
                _st_label_1168 -= 1
        self.send(('done',), to=(acceptors | proposers))
        self.output('WAITING FOR CONTROLLER TO TERMINATE')
        self.send(('done',), to=controller)
        self.output('----------------------->done........')
