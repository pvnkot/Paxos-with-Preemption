import sys
from random import randint
import time
import random
TIMEOUT = 1

class Proposer(process):
    def setup(acceptors:set, benchmark:process, nacceptors:int, loss_rate:float, message_delay:float, round_time:float, tout_prop:float, run_num:float, implementation:str):
        self.n = None              # proposal number
        self.majority = acceptors  # majority of acceptors; all in other papers
        self.correctness = 'Correctness' in str(benchmark)
        if correctness: 
            send(('perf_refresh', implementation), to= benchmark)
        else:
            send(('perf_refresh_perf', implementation), to= benchmark)

    def to_consent():
        n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num
        send(('prepare', n), to= majority)

        if await(len(setof(a, received(('respond', _n, _), from_ =a)))
                 > len(acceptors)/2):
            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                      or {randint(1,100)})  # any value, pick in 1..100
            responded = setof(a, received(('respond', _n, _), from_ =a))
            send(('accept', n, v), to= responded)
            if correctness: send(('perf_val_proposed', v, implementation), to= benchmark)
            
        elif timeout(tout_prop if tout_prop else TIMEOUT):
            output('failed proposal number', n)

    def run():
        while not received(('done',)):
            to_consent()
        output('ORIG Proposer terminating')

    def anyof(s):
        return next(iter(s)) if s else None

    #overriding definition of the send method, to simulate message loss and message delay.
    def send(message, to):
        if not message[0].startswith("perf") and not message[0] == 'done':
            if not loss_rate:
                delay = random.uniform(0, message_delay)
                await(False, timeout=delay)
                super().send(message, to)
            elif not message_delay:
                if not lose_message(loss_rate):
                    super().send(message, to)
                else:
                    output('Losing message', message)
        else:
            super().send(message, to)
    def lose_message(loss_rate):
        return random.random() < loss_rate

class Acceptor(process):
    def setup(learners:set, loss_rate:float, message_delay:float, run_num:int, implementation:str): pass

    def receive(msg= ('prepare', n), from_= p):
        if each(sent(('respond', n2, _)), has= n > n2):
            maxprop = anyof(setof((n, v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))
            send(('respond', n, maxprop), to =p)

    def receive(msg= ('accept', n, v)):
        if not some(sent(('respond', n2, _)), has= n2 > n):
            send(('accepted', n, v), to= learners)

    def run():
        await(received(('done',)))
        output('ORIG acceptor terminating')

    def anyof(s):
        """return any element of set s if s is not empty or 'None' otherwise"""
        return next(iter(s)) if s else None

    #overriding definition of the send method, to simulate message loss and message delay.
    def send(message, to):
        if not message[0].startswith("perf") and not message[0] == 'done':
            if not loss_rate:
                delay = random.uniform(0, message_delay)
                await(False, timeout=delay)
                super().send(message, to)
            elif not message_delay:
                if not lose_message(loss_rate):
                    super().send(message, to)
                else:
                    output('Losing message', message)
        else:
            super().send(message, to)
    def lose_message(loss_rate):
        return random.random() < loss_rate

class Learner(process):
    def setup(acceptors:set, benchmark:process, loss_rate:float, message_delay:float, tout_learn:float, run_num:int, implementation:str):
        self.correctness = 'Correctness' in str(benchmark)
    
    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            output('learned', n, v)
            if correctness: send(('perf_value_learned', v, run_num, implementation), to= benchmark)

        elif timeout(tout_learn*10 if tout_learn else TIMEOUT*10):
            output('failed learning anything')
            if correctness:
                send(('perf_value_not_learned', run_num, implementation), to= benchmark)
            else:
                send(('perf_value_not_learned_dur_perf', run_num, implementation), to= benchmark)

    def run():
        learn()
        output('ORIG Learner terminating')
        send(('learned', ), to=nodeof(self))

    

def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 5
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3

    acceptors = new(Acceptor, num= nacceptors)
    proposers = new(Proposer, (acceptors,), num= nproposers)
    learners = new(Learner, (acceptors,), num= nlearners)
    for p in acceptors: setup(p, (learners,))
    start(acceptors | proposers | learners)
    await(each(l in learners, has=received(('learned',), from_=l)))
    send(('done',), to= (acceptors|proposers))

# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News 
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.